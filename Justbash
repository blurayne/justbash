#!/usr/bin/env bash

# Strict bash scripting
set -uo pipefail -o errtrace


# We use parent to share a temporary working directory (this does the magic!)
export TMP="${TMP:-/tmp/just-$PPID}"

# Bash could use that directory as well
export TMPDIR="${TMP}"

# Some version information (we could use that in future releases!)
export JUSTSHELL="0.1"
export JUSTBASH="0.1"

# Export everything we will declare (except functions - they will be later on)
set -o allexport

# NOTE: Aliases won't be inherited by child processes!

##
# Util Functions

##
# Output to STDERR (red)
# param1: message
err() {
	local message="$1"
	>&2 echo -e "${message}"
}

##
# Raise an error eand exit
# param1: message
# param2: exit code (default: 1)
raise_err() {
	local message="${1}"
	local exitcode="${2:-1}"
	err "${message}"
	exit "${exitcode}"
}

##
# Format as title (yellow)
# param1: message
title() {
	local title="$1"
	echo -ne "\e[33m\e[1m"
	echo -n "${title}"
	echo -e "\e[0m"
}

##
# Highlight a string (bold-white)
# param1: message
highlight() {
	local title="$1"
	echo -ne "\e[1m"
	echo -n "${title}"
	echo -e "\e[0m"
}

##
# Command Output prior to Execution
# param1: message
show-and-exec() {
	local args=("$@")
	title "${args[*]}"
	"${args[@]}"
}

##
# Check if array contains a certain value
# param1: name of array
# param2: value
array-contains() {
	local -n arr="$1"
	local value="$2"
	for i in "${arr[@]}"; do
	if [ "$i" == "$value" ] ; then
		return 0
	fi
	done
	return 1
}


##
# write to a path/.filename
# then rename to path/filename
# to prevent a long running output pipe that was launched unintentionaly
# to overwrite an important file
# param1: filename
dot_rewrite() {
   local fp="$1"
   local d="$(dirname "$1")"
   local f="$(basename "$1")"
   cat - > "$d/.$f"
   mv "$d/$f" "$d/.$f"
}

##
# compare one version against another
# param1: version 1
# param2: operater (like used by test)
# param3: version 2
vercomp() {
	local IFS=.
	local a=($1) op="$2" b=($3)
	test $(printf "%d%03d%03d%03d" "${a[@]}") "$op" $(printf "%d%03d%03d%03d" "${b[@]}")
}

##
# Failproof Execution allowing false in shopt -e context
# param*: every command
noerr() {
	source <(echo -n "$@") || true
}

##
# Check if a certain version of a tool is installed
# param1: bin
# param2: option or rest of command to get version
# param3: operator
# param4: required version
req-bin() {
	local bin="$1"
	local binpath="$(which "$bin" 2>/dev/null )"
	if [[ -z "$binpath" ]]; then
		err "req-bin: $bin not found"
		return 1
	fi
	if [[ -z "${2:-}" ]]; then
		echo "$binpath OK"
		return 0
	fi
	if [[ "${2:-}" ]]; then
		local optversion="${2}"
		local vercomp="${3}"
		local reqversion="${4}"
		local version="$(source <(echo -n "$bin $optversion" ) | grep -E -o '([0-9]+)(\.[0-9]+)?(.[0_9]+)?' | head -1)"
		if [[ -z "$version" ]]; then
			err "req-bin: could not get version for $binpath"
			return 1
		fi
		if vercomp $version $vercomp $reqversion; then
			echo "$binpath (v$version) OK"
		else
			err "req-bin: version mismatch in $binpath ($3 $4?)"
			return 1
		fi
	fi
}

# print declaration of an env variable
# param1: key
print-env() {
	local env_key="$1"
	echo "${env_key}=$(printf "%q" "${!env_key}")"
}

##
# Check if a certain binary is in search path
# param1: canary name of binary
has-bin() {
	local bin="$1"
	which "${bin}" 1>/dev/null 2>&1
}

##
# Evaluate import
import() {
	local key="$1"
	if [ ! -v $key ]; then
		err "import: undefined variable ${key}"
		return 1
	fi
	local value="${!key}"
	# backup original
	if [ ! -v "__${key}" ]; then
		declare -g -x "${key}"="${value}"
	fi
	if [[ "${value:0:2}" == '$(' ]] && [[ "${value: -1}" == ')' ]]; then
		declare -g -x "${key}"="$(eval echo -n "${value}")"
	fi
}

##
# unmount syncronously
# param1: path
umount-sync() {
	local busy=1 success
	while [[ "${busy}" -eq 1 ]]; do
		if mountpoint -q "${1}"; then
			sudo umount -l "${1}" && success=1 || success=0 2> /dev/null
			if [ "${success}" -eq 0 ]; then
				busy=0	# umount suc# cessful
			else
				sleep .1
			fi
		else
			busy=0	# not mounted
		fi
	done
}

##
# check if path is empty
# param1: path
is-path-empty() {
	local p="$1"
	if [[ "$(find "$p" -maxdepth 0 -empty | wc -l)" -ge 1 ]]; then
		return 0
	fi
	return 1
}

##
# @ tag for bash files
# - uses alias

__dbg_show_command() {
	__DBG_SHOW_COMMAND="${1:-next}"
}

__dbg_hide_command() {
	__DBG_SHOW_COMMAND=""
}


declare -x __DBG_SHOW_COMMAND=""
declare -x __DBG_LAST_LINE=0
declare -x __DBG_CURRENT_FILE=""
declare -x __DBG_CURRENT_FB=""

# required
set -o functrace

# Wrapper to show command output
@() {
	"$@"
}
# Need in order to allow @ insubshells to execute
shopt -s expand_aliases
declare -x __DBG_LAST_COMMAND=""
declare -x __DBG_CURRENT_FB=()

# Show executed commands
__dbg_trap() {
	line_no="$BASH_LINENO"
	local _BASH_SOURCE="${BASH_ARGV[0]:-${BASH_SOURCE[-1]}}"
	if [ "${BASH_COMMAND:0:1}" == "@" ] && [ "${__DBG_LAST_COMMAND:-}" != "$BASH_COMMAND" ] && [ -z "${__DBG_SHOW_COMMAND}"]; then
		__DBG_LAST_COMMAND="$BASH_COMMAND"
		__DBG_SHOW_COMMAND="next"
	fi
	
	# if source command is encountered – which is our hook
	# get _SOURCE which been exported before
	# on next run we'll have BASH_ARGV[0] set and can use that
	if [[ "$BASH_COMMAND" =~ 'source "$__DBG_SOURCE"' ]]; then
		_BASH_SOURCE="$__DBG_SOURCE"
	fi

	# load bash script into buffer
	if [[ "$_BASH_SOURCE" != *"Justbash"* ]] &&	[[ "$__DBG_CURRENT_FILE" != "$_BASH_SOURCE"* ]]; then
		__DBG_LAST_LINE=0
		__DBG_CURRENT_FILE="$_BASH_SOURCE"
		__DBG_CURRENT_FB=()
		i=0
		while read -r -d $'\n' line; do
			((i=i+1))
			# do something with "$line" <-- quoted almost always
			__DBG_CURRENT_FB[$i]="$line"
			# if [ -n "$line" ]; then echo $line; fi;
			if [[ "$line" =~ ^\s*@([_a-z0-9:]+) ]]; then
				local cmd="${BASH_REMATCH[1]}"
				alias @${cmd}="@ ${cmd}"
			fi
		done < "$_BASH_SOURCE"
	fi

	# if the command has to be shown
	if [[ "$__DBG_SHOW_COMMAND" != "" ]]; then
		__DBG_SHOW_COMMAND=""
		LINE=""
		# Simple version: merge every line of command together\t
		# LINE="$(echo "${BASH_COMMAND}" | subst)"
		# LINE="$BASH_COMMAND"
		
		# Advanced version: show output like in file
		if [[ "${BASH_LINENO}" -gt "${__DBG_LAST_LINE}" ]]; then
		LINE_BUFFER=""
		while :; do

			LINE="${__DBG_CURRENT_FB[$((line_no))]:-unknown $line_no}"
			LINE_BUFFER+="${LINE_BUFFER:+$'\n'}${LINE}"
			if [[ "${LINE: -1}" == "\\" ]]; then
			let line_no++
			else
			break;
			fi
		done
		LINE_BUFFER="${LINE_BUFFER##@}"
		LINE="$(echo -n "$LINE_BUFFER" | $__ENVSUBST)"
		fi
		highlight "$LINE"
	fi
	declare -x __DBG_LAST_LINE="${BASH_LINENO}" 
}

__trap_on_ctrl_c() {
	err "Received interrupt. Aborting..."
	err "Temporary directory was "$TMP""
	# cat "$0" > "$TMP/"
	exit 141
}
trap __trap_on_ctrl_c INT
__shutdown() {
	# Bonus question: what additional env variables could you also get when you are in an interactive shell?
	# comm --output-delimiter= -3 <(printf "%s\n" "${OLD_ENV[@]}" | sort) <(declare -x | sort) \
	#		| tr -d '\0' \
	#	| grep -avE '^declare -x (COLUMNS|ROWS)=' \
	#	>> "${TMP}/.justrc" 
	true
}

trap __shutdown EXIT

##
# Init

# Create temp directory if not yet existent
if [[ ! -d "${TMP}" ]]; then
	mkdir -m 700 -p "$TMP"
elif [[ -e "${TMP}/.justrc" ]]; then
	source "${TMP}/.justrc"
fi

if [[ -e "${PWD}/Justfunctions" ]]; then
	source "${PWD}/Justfunctions"
fi

# Determine if we have better than envsubst – like renvsubst or shenvsubst ;)
__ENVSUBST="$(unalias envsubst 2>/dev/null; which renvsubst shenvsubst envsubst | head -1 || true)"

# shenvsubst can be inlined
if [[ "${__ENVSUBST##*/}" == "shenvsubst" ]]; then
	source "${__ENVSUBST}" || true
fi

##
# Main

# Export every function 
if [[ "${SHELL##*/}" == "bash" ]]; then
	declare -F | while read line; do declare -fx ${line##*-f }; done;
fi

declare -x __DBG_SOURCE=""

export-env() {
	local k="${1%%=*}"
	declare -g -x "$@"
	declare -x | grep -E "^declare -x ${k}=" >> "$TMP/.justrc"
}
alias export="export-env"

# Map all existent enviornment variables
mapfile -t OLD_ENV < <(declare -x)

## export all functions
declare -F | while read line; do declare -fx "${line##*-f }"; done || true

main() {
	declare -x CMD_ARGS=()	
	while [ "${#@}" -gt 0 ]; do
		case "$1" in
			-*) CMD_ARG+=("$1");;
			+*) CMD_ARG+=("$1");;
			-i) set +euo pipefail; CMD_ARG+=("$1");;
			-c)
				shift;
				eval "$1";
				exit 0;;
			*)
				# could be /tmp/justxxxx/
				if [[ ! -f "$1" ]]; then
					# if not and not attached
					if [[ ! -t /dev/stdin ]] ; then
						eval "$@";
					else
						err "$1 does not exist!"
						exit 1
					fi
					exit 0
				fi
				# Pipe errors and make them colorful
				exec 2> >(sed $'s,.*,\e[31m&\e[m,'>&2)
				# Export source for our ebug trap
				export __DBG_SOURCE="$1"
				# Imit our debug trap
				trap __dbg_trap DEBUG
				source "$__DBG_SOURCE";
				exit 0
		esac
		shift
	done

	##
	# Command execution
	if [[ -t 0 ]] && [[ ! "$(ps -eco comm= -f "$PPID")" =~ ^j(ust)? ]]; then
		export PS1='/\[\e[33m\]\u\[\e[m\]@\[\e[36m\]\h\[\e[m\]:\W\[\e[31m\]\[\e[m\]$ '
		## ensure auto-comletion
		set +euo pipefail
		source <(just --completions bash)
	fi
	/usr/bin/env -S bash -E "${CMD_ARGS[@]}"

}

main "$@"
